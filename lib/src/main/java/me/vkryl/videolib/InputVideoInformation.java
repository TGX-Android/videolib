/*
 * This file is a part of VideoLibrary Interface
 * Copyright Â© Vyacheslav Krylov (slavone@protonmail.ch) 2021
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package me.vkryl.videolib;

import android.content.Context;
import android.net.Uri;

import java.util.List;

/**
 * Data class containing information about the input video container.
 */
public class InputVideoInformation {
  /**
   * Information about video track.
   */
  public VideoTrackInformation videoTrack;

  /**
   * Information about audio track. Null, if input video doesn't have any.
   */
  public AudioTrackInformation audioTrack;

  /**
   * True when subtitle tracks are present in the video container.
   */
  public boolean hasSubtitleTracks;

  /**
   * Accurate duration in microseconds.
   */
  public double durationUs;

  /**
   * List of suggested compression strategies generated by the library, in order of increasing quality.
   *
   * Last item in this list should match the resolution of the input video.
   *
   * For example, possible suggested output resolutions for 60fps 16:9 1920x1080 video:
   *
   * "144p" -> 256x144,
   * "240p" -> 426x240,
   * "360p" -> 480x360,
   * "480p" -> 640x480,
   * "720p" -> 1280x720,
   * "720p60fps" -> 1280x720,
   * "1080p" -> 1920x1080,
   * "1080p60fps" -> 1920x1080.
   */
  public List<CompressionConfigurationSuggestion> suggestedCompressionConfigurations;

  /**
   * Information about features that can be applied to the chosen video.
   */
  public AvailableFeatures availableFeatures;

  /**
   * Arbitrary cache needed for any kind of optimizations in {@link VideoLibrary#correctTrimSegment(Context, Uri, TimeSegmentsCache, TimeSegment, Callback)}.
   */
  public TimeSegmentsCache trimCache;
}
